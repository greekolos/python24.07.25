name: Python CI

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Test run mode'
        required: true
        default: 'new_or_changes'
        type: choice
        options:
          - all
          - path
          - new
          - changes
          - new_or_changes
      test_path:
        description: 'Test file or folder path (only for mode=path)'
        required: false
        default: ''

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # –ù—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ git diff

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg2
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Detect changed and new test files
      id: collect
      shell: bash
      run: |
        echo "üîÅ Fetching origin/master..."
        if ! git fetch origin master; then
          echo "‚ö†Ô∏è Failed to fetch origin/master. Skipping diff."
          echo "MODIFIED_TESTS=" >> $GITHUB_OUTPUT
          echo "NEW_TESTS=" >> $GITHUB_OUTPUT
          echo "COMBINED_TESTS=" >> $GITHUB_OUTPUT
          exit 0
        fi

        MODIFIED=$(git diff --name-only --diff-filter=M origin/master...HEAD | grep '^test/.*\.py$' || true)
        NEW=$(git diff --name-only --diff-filter=A origin/master...HEAD | grep '^test/.*\.py$' || true)
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        COMBINED=$(echo -e "$MODIFIED\n$NEW" | sort -u | xargs)

        echo "MODIFIED_TESTS=$MODIFIED" >> $GITHUB_OUTPUT
        echo "NEW_TESTS=$NEW" >> $GITHUB_OUTPUT
        echo "COMBINED_TESTS=$COMBINED" >> $GITHUB_OUTPUT

    - name: Run tests
      shell: bash
      run: |
        input_mode="${{ github.event.inputs.mode }}"
        input_path="${{ github.event.inputs.test_path }}"
        mode="${input_mode:-new_or_changes}"
        path="${input_path:-}"

        new_tests="${{ steps.collect.outputs.NEW_TESTS }}"
        modified_tests="${{ steps.collect.outputs.MODIFIED_TESTS }}"
        combined_tests="${{ steps.collect.outputs.COMBINED_TESTS }}"

        echo "‚ñ∂ Mode: $mode"
        echo "‚ñ∂ Path: $path"
        echo "‚ñ∂ New tests: '$new_tests'"
        echo "‚ñ∂ Modified tests: '$modified_tests'"
        echo "‚ñ∂ Combined tests: '$combined_tests'"

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Ç–µ–π
        run_pytest() {
          files="$1"
          # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
          read -r -a arr <<< "$files"
          if [ ${#arr[@]} -eq 0 ]; then
            echo "‚ö† No test files to run. Skipping."
            exit 0
          fi
          pytest "${arr[@]}"
        }

        case "$mode" in
          all)
            echo "üß™ Running all tests..."
            pytest
            ;;
          path)
            if [ -z "$path" ]; then
              echo "‚ùå Error: test_path is required when mode=path"
              exit 1
            fi
            echo "üß™ Running test(s) at: $path"
            pytest "$path"
            ;;
          new)
            if [ -z "$(echo $new_tests | xargs)" ]; then
              echo "‚ö† No new test files found. Skipping tests."
              exit 0
            fi
            echo "üß™ Running new tests:"
            echo "$new_tests"
            run_pytest "$new_tests"
            ;;
          changes)
            if [ -z "$(echo $modified_tests | xargs)" ]; then
              echo "‚ö† No modified test files found. Skipping tests."
              exit 0
            fi
            echo "üß™ Running changed tests:"
            echo "$modified_tests"
            run_pytest "$modified_tests"
            ;;
          new_or_changes)
            if [ -z "$(echo $combined_tests | xargs)" ]; then
              echo "‚ö† No new or modified test files found. Skipping tests."
              exit 0
            fi
            echo "üß™ Running new and changed tests:"
            echo "$combined_tests"
            run_pytest "$combined_tests"
            ;;
          *)
            echo "‚ùå Invalid mode: $mode"
            exit 1
            ;;
        esac










