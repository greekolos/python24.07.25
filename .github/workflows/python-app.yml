name: Python CI

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Test run mode'
        required: true
        default: 'new_or_changes'
        type: choice
        options:
          - all
          - path
          - new
          - changes
          - new_or_changes
      test_path:
        description: 'Test file or folder path (only for mode=path)'
        required: false
        default: ''

  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg2
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Detect changed and new test files
      id: collect
      shell: bash
      run: |
        echo "🔁 Detecting changed files..."

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          echo "Pull request detected, base ref: $BASE_REF"
          git fetch origin "$BASE_REF"
          DIFF_BASE="origin/$BASE_REF"
        else
          echo "Push event detected"
          DIFF_BASE="HEAD^"
        fi

        MODIFIED=$(git diff --name-only --diff-filter=M $DIFF_BASE HEAD | grep '^test/.*\.py$' || true)
        NEW=$(git diff --name-only --diff-filter=A $DIFF_BASE HEAD | grep '^test/.*\.py$' || true)
        COMBINED=$(echo -e "$MODIFIED\n$NEW" | sort -u | xargs)

        echo "MODIFIED_TESTS=$MODIFIED" >> $GITHUB_OUTPUT
        echo "NEW_TESTS=$NEW" >> $GITHUB_OUTPUT
        echo "COMBINED_TESTS=$COMBINED" >> $GITHUB_OUTPUT

    - name: Run tests
      shell: bash
      run: |
        input_mode="${{ github.event.inputs.mode }}"
        input_path="${{ github.event.inputs.test_path }}"
        mode="${input_mode:-new_or_changes}"
        path="${input_path:-}"

        new_tests="${{ steps.collect.outputs.NEW_TESTS }}"
        modified_tests="${{ steps.collect.outputs.MODIFIED_TESTS }}"
        combined_tests="${{ steps.collect.outputs.COMBINED_TESTS }}"

        echo "▶ Mode: $mode"
        echo "▶ Path: $path"
        echo "▶ New tests: '$new_tests'"
        echo "▶ Modified tests: '$modified_tests'"
        echo "▶ Combined tests: '$combined_tests'"

        case "$mode" in
          all)
            echo "🧪 Running all tests..."
            pytest
            ;;
          path)
            if [ -z "$path" ]; then
              echo "❌ Error: test_path is required when mode=path"
              exit 1
            fi
            echo "🧪 Running test(s) at: $path"
            pytest "$path"
            ;;
          new)
            if [ -z "$(echo $new_tests | xargs)" ]; then
              echo "⚠ No new test files found. Skipping tests."
              exit 0
            fi
            echo "🧪 Running new tests:"
            echo "$new_tests"
            pytest $new_tests
            ;;
          changes)
            if [ -z "$(echo $modified_tests | xargs)" ]; then
              echo "⚠ No modified test files found. Skipping tests."
              exit 0
            fi
            echo "🧪 Running changed tests:"
            echo "$modified_tests"
            pytest $modified_tests
            ;;
          new_or_changes)
            if [ -z "$(echo $combined_tests | xargs)" ]; then
              echo "⚠ No new or modified test files found. Skipping tests."
              exit 0
            fi
            echo "🧪 Running new and changed tests:"
            echo "$combined_tests"
            pytest $combined_tests
            ;;
          *)
            echo "❌ Invalid mode: $mode"
            exit 1
            ;;
        esac










